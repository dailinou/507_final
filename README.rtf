{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh10680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Overview
\f1\b0 \
R
\f2 un the final2.py file and the program will pop up the top 25 popular games on Steam.\

\f1 User can choose between 1-25 in terminal to see developers of a specific game. The developer list will pop up, along with average rating of all games developed by the developer.\
Then user can choose one among all developers. The program will pop up all games developed by this developer, along with game descriptions.\
\
\

\f0\b Data sources:
\f1\b0  data.sqlite\
Two tables are included in this data source.\
\
One is developers, it has \
1.ID \
2.developer name \
3.average rating of all games developed by  this developer\
4.number of games developed by this developer \
5.total review number of all its games\
\
Another is Games, it has\
1.ID\
2.game name\
3.game description\
4.game url\
5.id for the game\'92s developer\
\
\

\f0\b Code structure
\f1\b0 \
Use crawling and scraping functions (crawling_steam_xxx) to retrieve steam related information like game names, game description, game url, game developers.\
\
Then split developer list so that each unit has only one developer.\
\
Search developer related information via API (function2), like all games developed by this developer.\
\
Finally go back to Steam to search all games developed by this developer.\
\
}